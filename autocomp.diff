diff --git a/static/js/autocomp.js b/static/js/autocomp.js
index d643baa..51e9fd5 100644
--- a/static/js/autocomp.js
+++ b/static/js/autocomp.js
@@ -29,7 +29,7 @@ var autocomp = {
   showOnEmptyWords: false,
   // flag to consider Latin characters as their non-Latin equivalents
   // (user types "a" and we show suggestions like "ál", "ão", etc.)
-  ignoreLatinCharacters: false,
+  ignoreLatinCharactersq: false,
   // flag to keep track of target line even if there is no suggestion for the typed text
   doNotResetTargetLineOnEmptySuggestionList: false,
 
diff --git a/static/tests/frontend/specs/autoComplete.js b/static/tests/frontend/specs/autoComplete.js
index 2db329d..b1685c3 100644
--- a/static/tests/frontend/specs/autoComplete.js
+++ b/static/tests/frontend/specs/autoComplete.js
@@ -1,10 +1,15 @@
 describe("ep_autocomp - show autocomplete suggestions", function(){
+  var utils;
+
+  before(function () {
+    utils = ep_autocomp_test_helper.utils;
+  });
 
   beforeEach(function(cb){
     helper.newPad(function(){
-      ep_autocomp_test_helper.utils.clearPad(function() {
-        ep_autocomp_test_helper.utils.resetFlagsAndEnableAutocomplete(function(){
-          ep_autocomp_test_helper.utils.writeWordsWithC(cb);
+      utils.clearPad(function() {
+        utils.resetFlagsAndEnableAutocomplete(function(){
+          utils.writeWordsWithC(cb);
         });
       });
     });
@@ -18,34 +23,26 @@ describe("ep_autocomp - show autocomplete suggestions", function(){
     var $lastLine =  inner$("div").last();
     $lastLine.sendkeys('{selectall}');
     $lastLine.sendkeys('c');
-    helper.waitFor(function(){
-      return outer$('div#autocomp').is(":visible");
-    }).done(function(){
+    utils.waitShowSuggestions(this, function(){
       var suggestionsPopup = outer$('div#autocomp');
       expect(suggestionsPopup.find('li').length).to.be(3);
-
       done();
     });
   });
 
   it("hides suggestions when user types a word that does not match any other from the text", function(done){
-    // this is a longer test, give it more time to run
-    this.timeout(5000);
-
-    var outer$ = helper.padOuter$;
     var inner$ = helper.padInner$;
 
     // first make sure suggestions are displayed
     var $lastLine =  inner$("div").last();
     $lastLine.sendkeys('{selectall}');
     $lastLine.sendkeys('c');
-    helper.waitFor(function(){
-      return outer$('div#autocomp').is(":visible");
-    }).done(function(){
+    utils.waitShowSuggestions(this, function(){
       // then check if suggestions are hidden if there are no words that match
       var $lastLine =  inner$("div").last();
       $lastLine.sendkeys('notSavedWord');
       helper.waitFor(function(){
+        var outer$ = helper.padOuter$;
         return !outer$('div#autocomp').is(":visible");
       }, 2000).done(done);
     });
@@ -59,11 +56,9 @@ describe("ep_autocomp - show autocomplete suggestions", function(){
     var $lastLine =  inner$("div").last();
     $lastLine.sendkeys('{selectall}');
     $lastLine.sendkeys('c');
-    helper.waitFor(function(){
-      return outer$('div#autocomp').is(":visible");
-    }).done(function(){
+    utils.waitShowSuggestions(this, function(){
       // then press ESC
-      ep_autocomp_test_helper.utils.pressEsc();
+      utils.pressEsc();
 
       helper.waitFor(function(){
         return !outer$('div#autocomp').is(":visible");
@@ -72,42 +67,34 @@ describe("ep_autocomp - show autocomplete suggestions", function(){
   });
 
   it("applies selected suggestion when user presses ENTER", function(done){
-    var outer$ = helper.padOuter$;
-    var inner$ = helper.padInner$;
-    var $lastLine = ep_autocomp_test_helper.utils.getLine(3);
+    var $lastLine = utils.getLine(3);
     $lastLine.sendkeys('{selectall}');
     $lastLine.sendkeys('c');
-    helper.waitFor(function(){
-      return outer$('div#autocomp').is(":visible");
-    }).done(function(){
-      ep_autocomp_test_helper.utils.pressEnter();
+    utils.waitShowSuggestions(this, function(){
+      utils.pressEnter();
       helper.waitFor(function(){
-        var $lastLine = ep_autocomp_test_helper.utils.getLine(3);
+        var $lastLine = utils.getLine(3);
         return $lastLine.text() === "car";
       }).done(done);
     });
   });
 
   it("applies selected suggestion when clicks on it on the suggestion box", function(done){
-    var outer$ = helper.padOuter$;
-    var inner$ = helper.padInner$;
-
     // type something to show suggestions
-    var $lastLine = ep_autocomp_test_helper.utils.getLine(3);
+    var $lastLine = utils.getLine(3);
     $lastLine.sendkeys('{selectall}');
     $lastLine.sendkeys('c');
 
-    helper.waitFor(function(){
-      return outer$('div#autocomp').is(":visible");
-    }).done(function(){
+    utils.waitShowSuggestions(this, function(){
       // click on last suggestion ("couch")
+      var outer$ = helper.padOuter$;
       var $suggestions = outer$('div#autocomp li');
       var $couchSuggestion = $suggestions.last();
       $couchSuggestion.click();
 
       // check if last suggestion was inserted
       helper.waitFor(function(){
-        var $lastLine = ep_autocomp_test_helper.utils.getLine(3);
+        var $lastLine = utils.getLine(3);
         return $lastLine.text() === "couch";
       }).done(done);
     });
@@ -116,27 +103,23 @@ describe("ep_autocomp - show autocomplete suggestions", function(){
   context("when there are line attributes applied", function(){
     beforeEach(function(cb) {
       // make line where "car" is a line with line attributes
-      ep_autocomp_test_helper.utils.addAttributeToLine(0, cb);
+      utils.addAttributeToLine(0, cb);
     });
 
     it("ignores * in the beginning of line", function(done){
-      var outer$ = helper.padOuter$;
-      var inner$ = helper.padInner$;
 
       // type something to display suggestions
-      var $lastLine = ep_autocomp_test_helper.utils.getLine(3);
+      var $lastLine = utils.getLine(3);
       $lastLine.sendkeys('{selectall}');
       $lastLine.sendkeys('c');
-      helper.waitFor(function(){
-        return outer$('div#autocomp').is(":visible");
-      }).done(function(){
+      utils.waitShowSuggestions(this, function(){
         // select first suggestion (should be "car")
-        ep_autocomp_test_helper.utils.pressEnter();
+        utils.pressEnter();
 
         // test if "car" was selected -- if it was not, it means the suggestion
         // was "*car", so "*" was not ignored
         helper.waitFor(function(){
-          var $lastLine = ep_autocomp_test_helper.utils.getLine(3);
+          var $lastLine = utils.getLine(3);
           return $lastLine.text() === "car";
         }).done(done);
       });
@@ -145,10 +128,10 @@ describe("ep_autocomp - show autocomplete suggestions", function(){
 
   context("when current line has line attribute", function(){
     beforeEach(function(cb) {
-      var $lastLine = ep_autocomp_test_helper.utils.getLine(3);
+      var $lastLine = utils.getLine(3);
       $lastLine.sendkeys('{selectall}');
       $lastLine.sendkeys("c");
-      ep_autocomp_test_helper.utils.addAttributeToLine(3, cb);
+      utils.addAttributeToLine(3, cb);
     });
 
     it("ignores * in the beginning of line", function(done){
@@ -159,10 +142,8 @@ describe("ep_autocomp - show autocomplete suggestions", function(){
       var $lastLine = inner$("div").last().find("ul li").contents();
 
       $lastLine.sendkeys('a');
-      helper.waitFor(function(){
-        return outer$('div#autocomp').is(":visible");
-      }).done(function(){
-        var suggestions = ep_autocomp_test_helper.utils.textsOf(outer$('div#autocomp li'));
+      utils.waitShowSuggestions(this, function(){
+        var suggestions = utils.textsOf(outer$('div#autocomp li'));
         expect(suggestions).to.contain("car");
         done();
       });
@@ -190,10 +171,8 @@ describe("ep_autocomp - show autocomplete suggestions", function(){
         $lastLine.sendkeys('a');
 
         // suggestions should have "car"
-        helper.waitFor(function(){
-          return outer$('div#autocomp').is(":visible");
-        }).done(function(){
-          var suggestions = ep_autocomp_test_helper.utils.textsOf(outer$('div#autocomp li'));
+        utils.waitShowSuggestions(this, function(){
+          var suggestions = utils.textsOf(outer$('div#autocomp li'));
           expect(suggestions).to.contain("car");
           done();
         });
@@ -208,30 +187,30 @@ describe("ep_autocomp - show autocomplete suggestions", function(){
 
           // move caret to beginning of line (line has "cs" at this point)
           var inner$ = helper.padInner$;
-          var outer$ = helper.padOuter$;
           var $lastLine = inner$("div").last().find("ul li").contents();
           $lastLine.sendkeys('{leftarrow}');
 
-          helper.waitFor(function(){
-            return outer$('div#autocomp').is(":visible");
-          }).done(cb);
+          utils.waitShowSuggestions(this, cb);
         });
 
         it("keeps line attributes when suggestion is selected", function(done) {
           var inner$ = helper.padInner$;
 
-          // select first suggestion (should be "car")
-          ep_autocomp_test_helper.utils.pressEnter();
+          // wait a little to press enter, so the caret will be the right position
+          setTimeout(function() {
+            // select first suggestion (should be "car")
+            utils.pressEnter();
 
-          // verify line attribute was kept on line
-          var $lastLine = inner$("div").last().find("ul li");
-          var hasLineAttribute = $lastLine.length > 0;
-          expect(hasLineAttribute).to.be(true);
+            // verify line attribute was kept on line
+            var $lastLine = inner$("div").last().find("ul li");
+            var hasLineAttribute = $lastLine.length > 0;
+            expect(hasLineAttribute).to.be(true);
 
-          // verify suggestion was correctly inserted
-          expect($lastLine.text()).to.be("carcs");
+            // verify suggestion was correctly inserted
+            expect($lastLine.text()).to.be("carcs");
 
-          done();
+            done();
+          }, 1000);
         });
       });
     });
@@ -239,4 +218,4 @@ describe("ep_autocomp - show autocomplete suggestions", function(){
 });
 
 /* ********** Helper functions ********** */
-var ep_autocomp_test_helper = ep_autocomp_test_helper || {};
+var ep_autocomp_test_helper = ep_autocomp_test_helper || {};
\ No newline at end of file
diff --git a/static/tests/frontend/specs/navigation.js b/static/tests/frontend/specs/navigation.js
index 184e2fc..77d589b 100644
--- a/static/tests/frontend/specs/navigation.js
+++ b/static/tests/frontend/specs/navigation.js
@@ -1,10 +1,16 @@
 describe("ep_autocomp - commands auto complete", function(){
+  var utils;
+
+  before(function () {
+    utils = ep_autocomp_test_helper.utils;
+  });
+
   //create a new pad before each test run
   beforeEach(function(cb){
     helper.newPad(function(){
-      ep_autocomp_test_helper.utils.clearPad(function() {
-        ep_autocomp_test_helper.utils.resetFlagsAndEnableAutocomplete(function(){
-          ep_autocomp_test_helper.utils.writeWordsWithC(cb);
+      utils.clearPad(function() {
+        utils.resetFlagsAndEnableAutocomplete(function(){
+          utils.writeWordsWithC(cb);
         });
       });
     });
@@ -19,13 +25,10 @@ describe("ep_autocomp - commands auto complete", function(){
     var $lastLine =  inner$("div").last();
     $lastLine.sendkeys('{selectall}');
     $lastLine.sendkeys('c');
-    helper.waitFor(function(){
-      return outer$('div#autocomp').is(":visible");
-    }).done(function() {
+    utils.waitShowSuggestions(this, function(){
       // force autocomplete to move selection down
       var autocomp = helper.padChrome$.window.autocomp;
       autocomp.moveSelectionDown();
-
       var selectedSuggestion = outer$('div#autocomp li.selected');
       expect(selectedSuggestion.text()).to.be("chrome");
       done();
@@ -40,9 +43,7 @@ describe("ep_autocomp - commands auto complete", function(){
     var $lastLine =  inner$("div").last();
     $lastLine.sendkeys('{selectall}');
     $lastLine.sendkeys('c');
-    helper.waitFor(function(){
-      return outer$('div#autocomp').is(":visible");
-    }).done(function() {
+    utils.waitShowSuggestions(this, function(){
       // force autocomplete to move selection to last option
       var autocomp = helper.padChrome$.window.autocomp;
       autocomp.moveSelectionDown();
@@ -58,17 +59,14 @@ describe("ep_autocomp - commands auto complete", function(){
   });
 
   it("selects suggestion", function(done){
-    var outer$ = helper.padOuter$;
     var inner$ = helper.padInner$;
     // opens suggestions box
     var $lastLine = inner$("div").last();
     $lastLine.sendkeys('{selectall}');
     $lastLine.sendkeys('c');
-    helper.waitFor(function(){
-      return outer$('div#autocomp').is(":visible");
-    }).done(function() {
+    utils.waitShowSuggestions(this, function(){
       var $lastLine = inner$('div').last();
-      var context = ep_autocomp_test_helper.utils.mockContext($lastLine);
+      var context = utils.mockContext($lastLine);
 
       // force autocomplete to select first option
       var autocomp = helper.padChrome$.window.autocomp;
@@ -88,9 +86,7 @@ describe("ep_autocomp - commands auto complete", function(){
     var $lastLine = inner$("div").last();
     $lastLine.sendkeys('{selectall}');
     $lastLine.sendkeys('c');
-    helper.waitFor(function(){
-      return outer$('div#autocomp').is(":visible");
-    }).done(function() {
+    utils.waitShowSuggestions(this, function(){
       // force autocomplete to close suggestions box
       var autocomp = helper.padChrome$.window.autocomp;
       autocomp.closeSuggestionBox();
diff --git a/static/tests/frontend/specs/pluginCustomization.js b/static/tests/frontend/specs/pluginCustomization.js
index d655615..caeb5cb 100644
--- a/static/tests/frontend/specs/pluginCustomization.js
+++ b/static/tests/frontend/specs/pluginCustomization.js
@@ -1,10 +1,15 @@
 describe("ep_autocomp - plugin customization", function(){
+  var utils;
+
+  before(function () {
+    utils = ep_autocomp_test_helper.utils;
+  });
 
   beforeEach(function(cb){
     helper.newPad(function(){
-      ep_autocomp_test_helper.utils.clearPad(function() {
-        ep_autocomp_test_helper.utils.resetFlagsAndEnableAutocomplete(function(){
-          ep_autocomp_test_helper.utils.writeWordsWithC(cb);
+      utils.clearPad(function() {
+        utils.resetFlagsAndEnableAutocomplete(function(){
+          utils.writeWordsWithC(cb);
         });
       });
     });
@@ -24,18 +29,15 @@ describe("ep_autocomp - plugin customization", function(){
     });
 
     it("calls the callback when user selects a suggestion", function(done){
-      var outer$ = helper.padOuter$;
       var inner$ = helper.padInner$;
 
       // type something to display suggestions
       var $lastLine =  inner$("div").last();
       $lastLine.sendkeys('{selectall}');
       $lastLine.sendkeys('c');
-      helper.waitFor(function(){
-        return outer$('div#autocomp').is(":visible");
-      }).done(function(){
+      utils.waitShowSuggestions(this, function(){
         // select a suggestion to trigger callback
-        ep_autocomp_test_helper.utils.pressEnter();
+        utils.pressEnter();
 
         helper.waitFor(function(){
           return callbackCalled;
@@ -76,26 +78,21 @@ describe("ep_autocomp - plugin customization", function(){
     });
 
     it("does not show suggestions", function(done){
-      var outer$ = helper.padOuter$;
-      var inner$ = helper.padInner$;
-
       // type something to display suggestions
-      var $lastLine = ep_autocomp_test_helper.utils.getLine(3);
+      var $lastLine = utils.getLine(3);
       $lastLine.sendkeys('{selectall}');
       $lastLine.sendkeys('c');
-      helper.waitFor(function(){
-        return outer$('div#autocomp').is(":visible");
-      }).done(function(){
+      utils.waitShowSuggestions(this, function(){
         //trigger key event (that should be ignored)
-        ep_autocomp_test_helper.utils.pressEnter();
+        utils.pressEnter();
 
         //verify key event was ignored
         setTimeout(function(){
-          var $lastLine = ep_autocomp_test_helper.utils.getLine(3);
+          var $lastLine = utils.getLine(3);
           expect($lastLine.text()).to.be("c");
           done();
         }, 500);
-      })
+      });
     });
   });
 
@@ -107,36 +104,35 @@ describe("ep_autocomp - plugin customization", function(){
     });
 
     it("displays suggestions without having to type a word", function(done) {
-      var outer$ = helper.padOuter$;
       var inner$ = helper.padInner$;
       var $lastLine = inner$("div").last();
 
       // type something to display suggestions
       $lastLine.sendkeys(" ");
 
-      helper.waitFor(function(){
-        return outer$('div#autocomp').is(":visible");
-      }).done(done);
+      utils.waitShowSuggestions(this, done);
     });
 
     it("applies suggestion word", function(done){
       //change the first line to a list
-      ep_autocomp_test_helper.utils.addAttributeToLine(0, function(){
-        var outer$ = helper.padOuter$;
-        var $lastLine =  ep_autocomp_test_helper.utils.getLine(0);
+      var self = this;
+      utils.addAttributeToLine(0, function(){
+        var $lastLine =  utils.getLine(0);
         // let the line empty
         $lastLine.sendkeys('{selectall}{backspace}');
 
-        helper.waitFor(function(){
-          return outer$('div#autocomp').is(":visible");
-        }).done(function(){
-          // select first option "chrome"
-          ep_autocomp_test_helper.utils.pressEnter();
-          helper.waitFor(function(){
-            var $firstLine =  ep_autocomp_test_helper.utils.getLine(0);
-            var $firstItem = $firstLine.find("ul li").text();
-            return $firstItem === "chrome";
-          }).done(done);
+        utils.waitShowSuggestions(self, function(){
+          // wait a little to press enter
+          setTimeout(function() {
+            // select first option "chrome"
+            utils.pressEnter();
+            helper.waitFor(function(){
+              var $firstLine =  utils.getLine(0);
+              var $firstItem = $firstLine.find("ul li").text();
+              return $firstItem === "chrome";
+            }).done(done);
+
+          }, 1000);
         });
       });
     });
@@ -145,22 +141,23 @@ describe("ep_autocomp - plugin customization", function(){
   context("when suggestions are not case sensitive", function(){
     // disable case sensitive matches
     beforeEach(function(){
-      var autocomp = helper.padChrome$.window.autocomp;
-      autocomp.caseSensitiveMatch = false;
-    })
+      utils.disableCaseSensitiveMatch();
+    });
+
+    afterEach(function () {
+      utils.enableCaseSensitiveMatch();
+    });
 
     it("shows suggestions in uppercase and lowercase", function(done){
       var outer$ = helper.padOuter$;
 
       //write CAR in the last line, duplicated word uppercase
-      var $lastLine = ep_autocomp_test_helper.utils.getLine(3);
+      var $lastLine = utils.getLine(3);
       $lastLine.sendkeys('{selectall}');
       $lastLine.sendkeys('CAR CA');
 
-      helper.waitFor(function(){
-        return outer$('div#autocomp').is(":visible");
-      }).done(function(){
-        var suggestions = ep_autocomp_test_helper.utils.textsOf(outer$('div#autocomp li'));
+      utils.waitShowSuggestions(this,function(){
+        var suggestions = utils.textsOf(outer$('div#autocomp li'));
         expect(suggestions).to.contain("CAR");
         expect(suggestions).to.contain("car");
         done();
diff --git a/static/tests/frontend/specs/pluginCustomizationLatinChars.js b/static/tests/frontend/specs/pluginCustomizationLatinChars.js
index a6e22ae..250a56b 100644
--- a/static/tests/frontend/specs/pluginCustomizationLatinChars.js
+++ b/static/tests/frontend/specs/pluginCustomizationLatinChars.js
@@ -1,17 +1,25 @@
 describe("ep_autocomp - plugin customization - when flag to show suggestions for Latin characters is turned on", function(){
+  var utils;
+
+  before(function () {
+    utils = ep_autocomp_test_helper.utils;
+  });
+
+  after(function () {
+    utils.enableCaseSensitiveMatch();
+  });
 
   beforeEach(function(cb){
     helper.newPad(function(){
-      ep_autocomp_test_helper.utils.clearPad(function() {
-        ep_autocomp_test_helper.utils.resetFlagsAndEnableAutocomplete(function(){
+      utils.clearPad(function() {
+        utils.resetFlagsAndEnableAutocomplete(function(){
           // enable flag to consider Latin chars as regular chars
           var autocomp = helper.padChrome$.window.autocomp;
           autocomp.ignoreLatinCharacters = true;
 
           // ignore case just to make tests easier -- so we don't need to create the double
           // of test scenarios
-          autocomp.caseSensitiveMatch = false;
-
+          utils.disableCaseSensitiveMatch();
           cb();
         });
       });
@@ -20,6 +28,7 @@ describe("ep_autocomp - plugin customization - when flag to show suggestions for
   });
 
   it("shows suggestions with 'á', 'à', 'ä', 'ã', 'â', 'Á', 'À', 'Ä', 'Ã', 'Â' when user types 'a'", function(done){
+    this.timeout(6000);
     var outer$ = helper.padOuter$;
     var inner$ = helper.padInner$;
 
@@ -33,8 +42,8 @@ describe("ep_autocomp - plugin customization - when flag to show suggestions for
 
     helper.waitFor(function(){
       return outer$('div#autocomp').is(":visible");
-    }).done(function(){
-      var suggestions = ep_autocomp_test_helper.utils.textsOf(outer$('div#autocomp li'));
+    }, 4000).done(function(){
+      var suggestions = utils.textsOf(outer$('div#autocomp li'));
       expect(suggestions).to.contain("dá");
       expect(suggestions).to.contain("dà");
       expect(suggestions).to.contain("dä");
@@ -64,7 +73,7 @@ describe("ep_autocomp - plugin customization - when flag to show suggestions for
     helper.waitFor(function(){
       return outer$('div#autocomp').is(":visible");
     }).done(function(){
-      var suggestions = ep_autocomp_test_helper.utils.textsOf(outer$('div#autocomp li'));
+      var suggestions = utils.textsOf(outer$('div#autocomp li'));
       expect(suggestions).to.contain("dé");
       expect(suggestions).to.contain("dè");
       expect(suggestions).to.contain("dë");
@@ -92,7 +101,7 @@ describe("ep_autocomp - plugin customization - when flag to show suggestions for
     helper.waitFor(function(){
       return outer$('div#autocomp').is(":visible");
     }).done(function(){
-      var suggestions = ep_autocomp_test_helper.utils.textsOf(outer$('div#autocomp li'));
+      var suggestions = utils.textsOf(outer$('div#autocomp li'));
       expect(suggestions).to.contain("dí");
       expect(suggestions).to.contain("dì");
       expect(suggestions).to.contain("dï");
@@ -120,7 +129,7 @@ describe("ep_autocomp - plugin customization - when flag to show suggestions for
     helper.waitFor(function(){
       return outer$('div#autocomp').is(":visible");
     }).done(function(){
-      var suggestions = ep_autocomp_test_helper.utils.textsOf(outer$('div#autocomp li'));
+      var suggestions = utils.textsOf(outer$('div#autocomp li'));
       expect(suggestions).to.contain("dó");
       expect(suggestions).to.contain("dò");
       expect(suggestions).to.contain("dö");
@@ -150,7 +159,7 @@ describe("ep_autocomp - plugin customization - when flag to show suggestions for
     helper.waitFor(function(){
       return outer$('div#autocomp').is(":visible");
     }).done(function(){
-      var suggestions = ep_autocomp_test_helper.utils.textsOf(outer$('div#autocomp li'));
+      var suggestions = utils.textsOf(outer$('div#autocomp li'));
       expect(suggestions).to.contain("dú");
       expect(suggestions).to.contain("dù");
       expect(suggestions).to.contain("dü");
@@ -178,7 +187,7 @@ describe("ep_autocomp - plugin customization - when flag to show suggestions for
     helper.waitFor(function(){
       return outer$('div#autocomp').is(":visible");
     }).done(function(){
-      var suggestions = ep_autocomp_test_helper.utils.textsOf(outer$('div#autocomp li'));
+      var suggestions = utils.textsOf(outer$('div#autocomp li'));
       expect(suggestions).to.contain("dç");
       expect(suggestions).to.contain("dÇ");
       done();
@@ -201,7 +210,7 @@ describe("ep_autocomp - plugin customization - when flag to show suggestions for
     helper.waitFor(function(){
       return outer$('div#autocomp').is(":visible");
     }).done(function(){
-      var suggestions = ep_autocomp_test_helper.utils.textsOf(outer$('div#autocomp li'));
+      var suggestions = utils.textsOf(outer$('div#autocomp li'));
       expect(suggestions).to.contain("dáo");
       expect(suggestions).to.not.contain("dào");
       expect(suggestions).to.not.contain("däo");
@@ -220,6 +229,7 @@ describe("ep_autocomp - plugin customization - when flag to show suggestions for
 
   context("when user did not type the beginning of suggestion using Latin chars", function() {
     beforeEach(function(cb) {
+      var self = this;
       var outer$ = helper.padOuter$;
       var inner$ = helper.padInner$;
 
@@ -239,18 +249,15 @@ describe("ep_autocomp - plugin customization - when flag to show suggestions for
         $lastLine.sendkeys("{rightarrow}{rightarrow}{rightarrow}o");
 
         // wait for suggestions to be available
-        helper.waitFor(function(){
-          return outer$('div#autocomp').is(":visible");
-        }).done(cb);
+        utils.waitShowSuggestions(self, cb);
       });
     });
 
     it("replaces the entire word respecting text formatting", function(done){
-      var outer$ = helper.padOuter$;
       var inner$ = helper.padInner$;
 
       // select first suggestion ("árvore")
-      ep_autocomp_test_helper.utils.pressEnter();
+      utils.pressEnter();
 
       // check if suggestion replaced text with Latin chars
       helper.waitFor(function(){
diff --git a/static/tests/frontend/specs/targetLine.js b/static/tests/frontend/specs/targetLine.js
index 3692131..6f474a9 100644
--- a/static/tests/frontend/specs/targetLine.js
+++ b/static/tests/frontend/specs/targetLine.js
@@ -1,10 +1,16 @@
 describe("ep_autocomp - target line", function(){
+  var utils;
+
+  before(function () {
+    utils = ep_autocomp_test_helper.utils;
+  });
+
   //create a new pad before each test run
   beforeEach(function(cb){
     helper.newPad(function(){
-      ep_autocomp_test_helper.utils.clearPad(function() {
-        ep_autocomp_test_helper.utils.resetFlagsAndEnableAutocomplete(function(){
-          ep_autocomp_test_helper.utils.writeWordsWithC(cb);
+      utils.clearPad(function() {
+        utils.resetFlagsAndEnableAutocomplete(function(){
+          utils.writeWordsWithC(cb);
         });
       });
     });
@@ -12,20 +18,19 @@ describe("ep_autocomp - target line", function(){
   });
 
   it("updates target line when suggestions box is opened", function(done){
-    var outer$ = helper.padOuter$;
-    var inner$ = helper.padInner$;
+    this.timeout(5000);
     var autocomp = helper.padChrome$.window.autocomp;
     var targetLine = 3;
 
     // opens suggestions box
-    var $lastLine = ep_autocomp_test_helper.utils.getLine(targetLine);
+    var $lastLine = utils.getLine(targetLine);
     $lastLine.sendkeys('{selectall}');
     $lastLine.sendkeys('c');
 
     // wait for targetLine to be updated
     helper.waitFor(function(){
       return autocomp.targetLine;
-    }).done(function() {
+    }, 3000).done(function() {
       expect(autocomp.targetLine).to.be(targetLine);
 
       done();
@@ -35,7 +40,6 @@ describe("ep_autocomp - target line", function(){
   it("resets target line when no suggestion is available for typed text", function(done){
     this.timeout(5000);
 
-    var outer$ = helper.padOuter$;
     var inner$ = helper.padInner$;
     var autocomp = helper.padChrome$.window.autocomp;
 
@@ -45,7 +49,7 @@ describe("ep_autocomp - target line", function(){
     $lastLine.sendkeys('c');
     helper.waitFor(function(){
       return autocomp.targetLine !== undefined;
-    }).done(function() {
+    }, 3000).done(function() {
       // type something that won't have suggestions
       var $lastLine = inner$("div").last();
       $lastLine.sendkeys('ccc');
@@ -66,7 +70,6 @@ describe("ep_autocomp - target line", function(){
     it("does not reset target line when no suggestion is available for typed text", function(done){
       this.timeout(5000);
 
-      var outer$ = helper.padOuter$;
       var inner$ = helper.padInner$;
       var autocomp = helper.padChrome$.window.autocomp;
       var targetLine = 3;
@@ -79,7 +82,7 @@ describe("ep_autocomp - target line", function(){
       // wait for targetLine to be updated
       helper.waitFor(function(){
         return autocomp.targetLine !== undefined;
-      }).done(function() {
+      }, 3000).done(function() {
         expect(autocomp.targetLine).to.be(targetLine);
 
         done();
@@ -88,7 +91,7 @@ describe("ep_autocomp - target line", function(){
   });
 
   it("resets target line when suggestion is selected", function(done){
-    var outer$ = helper.padOuter$;
+    this.timeout(5000);
     var inner$ = helper.padInner$;
     var autocomp = helper.padChrome$.window.autocomp;
 
@@ -98,9 +101,9 @@ describe("ep_autocomp - target line", function(){
     $lastLine.sendkeys('c');
     helper.waitFor(function(){
       return autocomp.targetLine !== undefined;
-    }).done(function() {
+    }, 3000).done(function() {
       var $lastLine = inner$('div').last();
-      var context = ep_autocomp_test_helper.utils.mockContext($lastLine);
+      var context = utils.mockContext($lastLine);
 
       // force autocomplete to select suggestion
       var autocomp = helper.padChrome$.window.autocomp;
@@ -114,7 +117,7 @@ describe("ep_autocomp - target line", function(){
   });
 
   it("resets target line when suggestions box is manually closed", function(done){
-    var outer$ = helper.padOuter$;
+    this.timeout(5000);
     var inner$ = helper.padInner$;
     var autocomp = helper.padChrome$.window.autocomp;
 
@@ -124,7 +127,7 @@ describe("ep_autocomp - target line", function(){
     $lastLine.sendkeys('c');
     helper.waitFor(function(){
       return autocomp.targetLine !== undefined;
-    }).done(function() {
+    }, 3000).done(function() {
       // force autocomplete to close suggestions box
       autocomp.closeSuggestionBox();
 
diff --git a/static/tests/frontend/specs/utils.js b/static/tests/frontend/specs/utils.js
index 85a1d12..f4531e3 100644
--- a/static/tests/frontend/specs/utils.js
+++ b/static/tests/frontend/specs/utils.js
@@ -130,4 +130,20 @@ ep_autocomp_test_helper.utils = {
     }
     return context;
   },
+
+  waitShowSuggestions: function(test, cb){
+    test.timeout(5000);
+    helper.waitFor(function(){
+      var outer$ = helper.padOuter$;
+      return outer$('div#autocomp').is(":visible");
+    }, 3000).done(cb);
+  },
+  disableCaseSensitiveMatch: function(){
+    var autocompConfig = helper.padChrome$.window.clientVars.ep_autocomp;
+    autocompConfig.caseSensitiveMatch = false;
+  },
+  enableCaseSensitiveMatch: function(){
+    var autocompConfig = helper.padChrome$.window.clientVars.ep_autocomp;
+    autocompConfig.caseSensitiveMatch = true;
+  },
 };
\ No newline at end of file
